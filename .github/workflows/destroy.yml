name: Destroy Infrastructure

on:
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository (Main Branch)
      uses: actions/checkout@v3
      
    - name: Checkout State Branch
      uses: actions/checkout@v3
      with:
        ref: state
        path: state_branch

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0

    - name: Restore Terraform State
      run: |
        mkdir -p tfstate
        if [ -d "state_branch/.terraform" ]; then
          cp -r state_branch/.terraform* .
        fi
        if [ -f "state_branch/tfstate/terraform.tfstate" ]; then
          cp state_branch/tfstate/terraform.tfstate tfstate/
        fi
        
    - name: Terraform Init
      run: terraform init

    - name: Terraform Destroy
      run: terraform destroy -auto-approve

    - name: Save Terraform State
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git checkout -b state || git checkout state
        # Specify merge strategy for pull to avoid the divergent branches error
        git pull --ff-only origin state || git pull --rebase origin state || true
        mkdir -p tfstate
        cp -r .terraform* ./
        cp -r tfstate/terraform.tfstate* tfstate/
        git add .terraform* tfstate/
        git commit -m "Update Terraform state after destroy" || echo "No changes to commit"
        git push origin state